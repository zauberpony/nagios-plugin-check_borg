#!/bin/sh
set -o errexit
set -o nounset

PROGNAME=$(basename "$0")
PROGPATH=$(echo "$0" | sed -e 's,[\\/][^\\/][^\\/]*$,,')
REVISION="0.1"
COMMAND_BORG="$(command -v borg)"

# source a utils.sh from nagios-plugins
# if the check is not executed in the normal check-directory,
# we'll search on common places. This gives us the ability to
# avoid problems with the package-manager
if [ -r "$PROGPATH/utils.sh" ] && [ -f "$PROGPATH/utils.sh" ]; then
	. "$PROGPATH/utils.sh"
elif [ -r /usr/lib/nagios/plugins/utils.sh ] && [ -f /usr/lib/nagios/plugins/utils.sh ]; then
	. /usr/lib/nagios/plugins/utils.sh
elif [ -r /usr/lib/monitoring-plugins/utils.sh ] && [ -f /usr/lib/monitoring-plugins/utils.sh ]; then
	. /usr/lib/monitoring-plugins/utils.sh
else
	echo "Cannot source utils.sh from monitoring-plugins!" >&2
	exit 128
fi

debug(){   ([ "$verbose" -gt 1 ] && echo "$*") || return 0; }
verbose(){ ([ "$verbose" -gt 0 ] && echo "$*") || return 0; }

error(){   echo "$*" >&2; exit $STATE_UNKNOWN; }

crit='7 days ago'
warn='3 days ago'
verbose=0
repo=''

usage(){
	cat >&2 <<-FIN
	usage: $PROGNAME -R REPO [-w DATE] [-c DATE] [ -h -v ]

	REPO: borg repo-url
	DATE: Any valid date for the date-command.
	      default for -w: "${warn}"
	      default for -c: "${crit}"
	FIN
	exit $STATE_UNKNOWN
}

while getopts ":vhR:a:c:w:" opt; do
	case $opt in
		v)
			verbose=$((verbose + 1))
			;;
		h)
			usage
			;;
		R)
			repo=$OPTARG
			;;
		c)
			crit=$OPTARG
			;;
		w)
			warn=$OPTARG
			;;
		\?)
			error "Invalid option: -$OPTARG"
			usage
			;;
		:)
			error "Option -$OPTARG requires an argument."
			usage
			;;
	esac
done


if [ -z "${COMMAND_BORG}" ]; then
	error "No command 'borg' available."
fi

if [ -z "${repo}" ]; then
	error "No repository specified!"
fi
verbose "repo ${repo}"

# convert values to seconds to enable comparison
sec_warn="$(date --date="${warn}" '+%s')"
sec_crit="$(date --date="${crit}" '+%s')"

# check warning and critical values
if check_range "${sec_crit}" 0:"${sec_warn}" ; then
	error "Warning value has to be a more recent timepoint than critical."
fi

# get unixtime of last backup
last="$(borg list --format '{time}' --sort-by timestamp --last 1 ${repo})"
sec_last=$(date --date="${last}" +%s)

# interpret the amount of fails
if [ "${sec_crit}" -gt "${sec_last}" ]; then
	state=$STATE_CRITICAL
	msg="BORG CRITICAL, last backup made on ${last}"
elif [ "${sec_warn}" -gt "${sec_last}" ]; then
	state=$STATE_WARNING
	msg="BORG WARN, last backup made on ${last}"
else
	state=$STATE_OK
	msg="BORG OK, last backup made on ${last}"
fi

echo "$msg"
exit $state
