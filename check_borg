#!/bin/sh
set -o errexit
set -o nounset

PROGNAME=$(basename "$0")
PROGPATH=$(echo "$0" | sed -e 's,[\\/][^\\/][^\\/]*$,,')
REVISION="0.2"
COMMAND_BORG="$(command -v borg)"

# source a utils.sh from nagios-plugins
# if the check is not executed in the normal check-directory,
# we'll search on common places. This gives us the ability to
# avoid problems with the package-manager
if [ -r "$PROGPATH/utils.sh" ] && [ -f "$PROGPATH/utils.sh" ]; then
	. "$PROGPATH/utils.sh"
elif [ -r /usr/lib/nagios/plugins/utils.sh ] && [ -f /usr/lib/nagios/plugins/utils.sh ]; then
	. /usr/lib/nagios/plugins/utils.sh
elif [ -r /usr/lib/monitoring-plugins/utils.sh ] && [ -f /usr/lib/monitoring-plugins/utils.sh ]; then
	. /usr/lib/monitoring-plugins/utils.sh
elif [ -r /usr/local/libexec/nagios/utils.sh ] && [ -f /usr/local/libexec/nagios/utils.sh ]; then
	. /usr/local/libexec/nagios/utils.sh
else
	echo "Cannot source utils.sh from monitoring-plugins!" >&2
	exit 128
fi

debug(){   ([ "$verbose" -gt 1 ] && echo "$*") || return 0; }
verbose(){ ([ "$verbose" -gt 0 ] && echo "$*") || return 0; }

error(){   echo "$*" >&2; exit $STATE_UNKNOWN; }

crit=73
warn=25
verbose=0
repo=''

usage(){
	cat >&2 <<-FIN
	usage: $PROGNAME -R REPO [-w HOURS] [-c HOURS] [ -h -v ]

	REPO:  borg repo-url
	HOURS: max age in hours
	      default for -w: "${warn}"
	      default for -c: "${crit}"
	FIN
	exit $STATE_UNKNOWN
}

while getopts ":vhR:a:c:w:" opt; do
	case $opt in
		v)
			verbose=$((verbose + 1))
			;;
		h)
			usage
			;;
		R)
			repo=$OPTARG
			;;
		c)
			crit=$OPTARG
			;;
		w)
			warn=$OPTARG
			;;
		\?)
			error "Invalid option: -$OPTARG"
			usage
			;;
		:)
			error "Option -$OPTARG requires an argument."
			usage
			;;
	esac
done

# turns a timestamp returned by borg's {time} format to unixtime
# e.g.: "Wed, 2017-12-27 17:52:15" -> 1514393535
# parsing with GNU date is different than with BSD date
borg_time_to_unixtime() {
	# FreeBSD's date has no --version flag, so checking via uname is easier and should be sufficient for this script
	case $(uname) in
		FreeBSD)
			date -jf "%F %T" "$(echo ${1} | awk '{ print $2 " " $3 }')" +%s
			;;
		Linux)
			date --date="${1}" +%s
			;;
		*)
			# not yet implemented, but could easily be added. return 0, so state is always critical
			echo 0
			;;
	esac
}

if [ -z "${COMMAND_BORG}" ]; then
	error "No command 'borg' available."
fi

if [ -z "${repo}" ]; then
	error "No repository specified!"
fi
verbose "repo ${repo}"

# check warning and critical values
if [ "${crit}" -le "${warn}" ]; then
	error "Warning value (${warn}h) has to be lower than critical (${crit}h)."
fi

# get unixtime of last backup
date_last_backup="$(borg list --format '{time}' --last 1 ${repo})"
timestamp_last_backup=$(borg_time_to_unixtime "${date_last_backup}")

# calculate the minimum seconds for warning and critical for comparison
now=$(date +%s)
threshold_warn=$(expr ${now} - ${warn} \* 3600)
threshold_crit=$(expr ${now} - ${crit} \* 3600)

# compare the actual backup timestamp against the expected values
if [ "${threshold_crit}" -gt "${timestamp_last_backup}" ]; then
	state=$STATE_CRITICAL
	msg="BORG CRITICAL, last backup made on ${date_last_backup}"
elif [ "${threshold_warn}" -gt "${timestamp_last_backup}" ]; then
	state=$STATE_WARNING
	msg="BORG WARN, last backup made on ${date_last_backup}"
else
	state=$STATE_OK
	msg="BORG OK, last backup made on ${date_last_backup}"
fi

echo "$msg"
exit $state
